#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 22 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 1 6 #"wxloc\0"
          0 0 51 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 1525 0 28 3 21 #"#lang scribble/manual"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"@("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"./common."
0 0 29 3 3 #"rkt"
0 0 19 3 1 #"\""
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 10 #"ts-tactics"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 53 #"ts-tactics/tactics/tactic-library/disintegrating-code"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 51 #"\"../new-tactics/disintegrating-code-no-peeking.rkt\""
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 31 #"\"../new-tactics/no-peeking.rkt\""
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 11 #"2htdp/image"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"@("
0 0 14 3 3 #"bio"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"Vanessa "
0 0 29 3 6 #"Beeler"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 19 3 1 #"\""
0 0 29 3 7 #"vanessa"
0 0 19 3 13 #"_picture_new."
0 0 29 3 3 #"png"
0 0 19 3 1 #"\""
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 19 3 78
(
 #"\"I started coding my senior year of high school in AP Computer Scie"
 #"nce. I just"
) 0 0 4 29 1 #"\n"
0 0 19 3 83
(
 #"       finished the intro series of CS classes during my freshman ye"
 #"ar at Cal Poly "
) 0 0 29 3 3 #"SLO"
0 0 19 3 1 #"."
0 0 4 29 1 #"\n"
0 0 19 3 54 #"       I know Python as well as a little bit of Java.\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"@("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"face"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"gold\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"@("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"eye"
0 0 24 3 2 #" ("
0 0 14 3 14 #"overlay/offset"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 21 3 2 #"30"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"white\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"@("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"mouth"
0 0 24 3 2 #" ("
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 3 #"pen"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"goldenrod\""
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"round\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"round\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 4 #"blog"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"blog-post"
0 0 24 3 1 #"["
0 0 19 3 21 #"\"Personal Philosophy\""
0 0 24 3 2 #"]{"
0 0 24 29 1 #"\n"
0 0 20 3 91
(
 #"I think coding should be used in the future to streamline the proces"
 #"s of performing trivial"
) 0 0 24 29 1 #"\n"
0 0 20 3 82
(
 #"tasks in such a way that they no longer need to be done by humans. O"
 #"nce people are"
) 0 0 24 29 1 #"\n"
0 0 20 3 83
(
 #"no longer required to perform these time-consuming activities, they "
 #"will be able to"
) 0 0 24 29 1 #"\n"
0 0 20 3 83
(
 #"focus their attention on more difficult tasks and solely focus on cr"
 #"eating a better"
) 0 0 24 29 1 #"\n"
0 0 20 3 87
(
 #"society for everyone to live in. Personally, I would like to contrib"
 #"ute to this process"
) 0 0 24 29 1 #"\n"
0 0 20 3 88
(
 #"as much as possible within my career. People should be able to focus"
 #" on things that they"
) 0 0 24 29 1 #"\n"
0 0 20 3 38 #"love instead of chore-like activities."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"blog-post"
0 0 24 3 1 #"["
0 0 19 3 7 #"\"Day 1\""
0 0 24 3 2 #"]{"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 24 29 1 #"\n"
0 0 20 3 21 #"Distributed Cognition"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 79
(
 #"On our first day of the internship, we researched Distributed Cognit"
 #"ion. To the"
) 0 0 24 29 1 #"\n"
0 0 20 3 77
(
 #"best of my understanding, DCog is the idea that each individual's mi"
 #"nd is not"
) 0 0 24 29 1 #"\n"
0 0 20 3 73
(
 #"the full extent of their knowledge. Each person works together with "
 #"their"
) 0 0 24 29 1 #"\n"
0 0 20 3 66
#"environment to add to their own cognition and ideas. Currently, it"
0 0 24 29 1 #"\n"
0 0 20 3 79
(
 #"is possibly becoming less important to be able to remember everythin"
 #"g yourself,"
) 0 0 24 29 1 #"\n"
0 0 20 3 77
(
 #"as it is becoming easier and easier to use the Internet or other res"
 #"ources to"
) 0 0 24 29 1 #"\n"
0 0 20 3 77
(
 #"look up any topics you are curious about or have learned about previ"
 #"ously but"
) 0 0 24 29 1 #"\n"
0 0 20 3 7 #"forgot."
0 0 24 29 1 #"\n"
0 0 20 3 58
#"Here are a few links that I used to learn about the topic:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 3 #"url"
0 0 24 3 1 #"{"
0 0 20 3 52 #"http://edutechwiki.unige.ch/en/Distributed_cognition"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 3 #"url"
0 0 24 3 1 #"{"
0 0 20 3 65
#"https://www.learning-theories.com/distributed-cognition-dcog.html"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"blog-post"
0 0 24 3 1 #"["
0 0 19 3 7 #"\"Day 2\""
0 0 24 3 2 #"]{"
0 0 24 29 1 #"\n"
0 0 20 3 34 #"Recognition vs. Recall vs. Fluency"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 80
(
 #"Today, we learned about recall vs. recognition. We applied our knowl"
 #"edge of this"
) 0 0 24 29 1 #"\n"
0 0 20 3 82
(
 #"by playing an ASL memory game. We learned that we were able to recal"
 #"l symbols that"
) 0 0 24 29 1 #"\n"
0 0 20 3 79
(
 #"were either the most unique or relevant to use. Eventually, by playi"
 #"ng the game"
) 0 0 24 29 1 #"\n"
0 0 20 3 79
(
 #"for a few rounds, we were able to recognize more symbols. We also le"
 #"arned about"
) 0 0 24 29 1 #"\n"
0 0 20 3 43 #"how fluency is the highest level of recall."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"blog-post"
0 0 24 3 1 #"["
0 0 19 3 7 #"\"Day 3\""
0 0 24 3 2 #"]{"
0 0 24 29 1 #"\n"
0 0 20 3 41 #"Refactoring, Broca's Region, fMRI Studies"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 102
(
 #"Refactoring is the process of reorganizing existing computer code wi"
 #"thout changing any external code. "
) 0 0 24 29 1 #"\n"
0 0 20 3 106
(
 #"The Broca's Region is the area of the brain responsible for speech f"
 #"ormation. It is located in the frontal"
) 0 0 24 29 1 #"\n"
0 0 20 3 108
(
 #"lobe of the dominant hemisphere. fMRI is a type of imaging that meas"
 #"ures brain activity by detecting changes"
) 0 0 24 29 1 #"\n"
0 0 20 3 22 #"related to blood flow."
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"blog-post"
0 0 24 3 1 #"["
0 0 19 3 7 #"\"Day 4\""
0 0 24 3 2 #"]{"
0 0 24 29 1 #"\n"
0 0 20 3 10 #"New Tactic"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 106
(
 #"We made a variation of the Disintegrating Code tactic by requiring s"
 #"tudents to not look at their keyboards"
) 0 0 24 29 1 #"\n"
0 0 20 3 98
(
 #"while typing. This reinforces and strengthens a student's ability to"
 #" type, which is clearly a very"
) 0 0 24 29 1 #"\n"
0 0 20 3 105
(
 #"important skill in the realm of coding. Other than this relatively s"
 #"mall detail, the overall structure of"
) 0 0 24 29 1 #"\n"
0 0 20 3 47 #"the tactic is the same as disintegrating code. "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 40 #"DISINTEGRATING CODE (NO PEEKING VERSION)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"@("
0 0 14 3 10 #"no-peeking"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"blog-post"
0 0 24 3 1 #"["
0 0 19 3 7 #"\"Day 5\""
0 0 24 3 2 #"]{"
0 0 24 29 1 #"\n"
0 0 20 3 8 #"New Kata"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 112
(
 #"Today we worked on making a new kata for the kids to work on, using "
 #"the fundamentals language. Below is the code"
) 0 0 24 29 1 #"\n"
0 0 20 3 73
(
 #"for the kata that we made, which makes an emoji that is rolling its "
 #"eyes."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 41 #"(define face (circle 100 \"solid\" \"gold\"))"
0 0 24 29 1 #"\n"
0 0 20 3 60
#"(define eye (overlay/offset (circle 10 \"solid\" \"black\") 0 20"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 20 3 29 #"(circle 30 \"solid\" \"white\")))"
0 0 24 29 1 #"\n"
0 0 20 3 71
(
 #"(define mouth (line 40 0 (pen \""
 #"goldenrod\" 20 \"solid\" \"round\" \"round\")))"
) 0 0 24 29 1 #"\n"
0 0 20 3 88
(
 #"(overlay/offset mouth 0 -50 (overlay/offset eye -40 20 (overlay/offs"
 #"et eye 40 20 face)))"
) 0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"@("
0 0 14 3 14 #"overlay/offset"
0 0 24 3 1 #" "
0 0 14 3 5 #"mouth"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 3 #"-50"
0 0 24 3 2 #" ("
0 0 14 3 14 #"overlay/offset"
0 0 24 3 1 #" "
0 0 14 3 3 #"eye"
0 0 24 3 1 #" "
0 0 21 3 3 #"-40"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 2 #" ("
0 0 14 3 14 #"overlay/offset"
0 0 24 3 1 #" "
0 0 14 3 3 #"eye"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #" "
0 0 14 3 4 #"face"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"blog-post"
0 0 24 3 1 #"["
0 0 19 3 7 #"\"Day 6\""
0 0 24 3 2 #"]{"
0 0 24 29 1 #"\n"
0 0 20 3 67
#"Today we worked with 2htdp/universe in order to animate our images."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"blog-post"
0 0 24 3 1 #"["
0 0 19 3 7 #"\"Day 7\""
0 0 24 3 2 #"]{"
0 0 24 29 1 #"\n"
0 0 20 3 113
(
 #"Today we continued working with 2htdp/universe, making animations wi"
 #"th objects of our choosing. Below is the code"
) 0 0 24 29 1 #"\n"
0 0 20 3 116
(
 #"that I wrote for a polygon that looks like a flower to continually c"
 #"hange colors between those in the rainbow, which"
) 0 0 24 29 1 #"\n"
0 0 20 3 20 #"travels in a circle."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 20 #"(define (shape tick)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 105
(
 #"(overlay/offset (pulled-regular-polygon 50 5 1 140 \"solid\" (find-c"
 #"olor tick)) (find-x tick) (find-y tick)"
) 0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 20 3 30 #"(square 400 \"solid\" \"white\")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 25 #"(define (find-color tick)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 37 #"(cond ((< (modulo tick 60) 10) \"red\")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 34 #"((< (modulo tick 60) 20) \"orange\")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 34 #"((< (modulo tick 60) 30) \"yellow\")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 33 #"((< (modulo tick 60) 40) \"green\")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 32 #"((< (modulo tick 60) 50) \"blue\")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 12 #"(\"purple\")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 21 #"(define (find-x tick)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 26 #"(* 100 (cos (* .1 tick))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 21 #"(define (find-y tick)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 26 #"(* 100 (sin (* .1 tick))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 11 #"(big-bang 0"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 14 #"(on-tick add1)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 16 #"(to-draw shape))"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"blog-post"
0 0 24 3 1 #"["
0 0 19 3 7 #"\"Day 8\""
0 0 24 3 2 #"]{"
0 0 24 29 1 #"\n"
0 0 20 3 124
(
 #"Today we worked on a coding interview question at the beginning of t"
 #"he day, and then Charbel and I started working on making"
) 0 0 24 29 1 #"\n"
0 0 20 3 125
(
 #"a snake game as a new kata. We planned out several intermediate kata"
 #"s before the final step of making the classic game Snake."
) 0 0 24 29 1 #"\n"
0 0 20 3 123
(
 #"As for coding, we only got through the first and second snake katas "
 #"today, and plan to do more on future days. Below is the"
) 0 0 24 29 1 #"\n"
0 0 20 3 30 #"code for the first snake kata:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 27 #"(define (create-snake time)"
0 0 24 29 1 #"\n"
0 0 20 3 40 #"(place-image (square 30 \"solid\" \"green\")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 7 #"300 300"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 23 #"(empty-scene 600 600)))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 11 #"(big-bang 0"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 14 #"(on-tick add1)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 23 #"(to-draw create-snake))"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 43 #"This is the code for the second snake kata:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 21 #"(define direction #t)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 34 #"(define (spinning-rectangle state)"
0 0 24 29 1 #"\n"
0 0 20 3 13 #"(if direction"
0 0 24 29 1 #"\n"
0 0 20 3 12 #"(place-image"
0 0 24 29 1 #"\n"
0 0 20 3 27 #"(square 30 \"solid\" \"green\")"
0 0 24 29 1 #"\n"
0 0 20 3 24 #"(modulo (* 5 state) 200)"
0 0 24 29 1 #"\n"
0 0 20 3 3 #"100"
0 0 24 29 1 #"\n"
0 0 20 3 22 #"(empty-scene 200 200))"
0 0 24 29 1 #"\n"
0 0 20 3 12 #"(place-image"
0 0 24 29 1 #"\n"
0 0 20 3 27 #"(square 30 \"solid\" \"green\")"
0 0 24 29 1 #"\n"
0 0 20 3 32 #"(- 200 (modulo (* 5 state) 200))"
0 0 24 29 1 #"\n"
0 0 20 3 3 #"100"
0 0 24 29 1 #"\n"
0 0 20 3 24 #"(empty-scene 200 200))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 11 #"(big-bang 0"
0 0 24 29 1 #"\n"
0 0 20 3 14 #"(on-tick add1)"
0 0 24 29 1 #"\n"
0 0 20 3 37 #"(to-draw spinning-rectangle 200 200))"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"blog-post"
0 0 24 3 1 #"["
0 0 19 3 7 #"\"Day 9\""
0 0 24 3 2 #"]{"
0 0 24 29 1 #"\n"
0 0 20 3 114
(
 #"Today we started again with the coding interview questions from yest"
 #"erday. The first one was \"write code to remove"
) 0 0 24 29 1 #"\n"
0 0 20 3 115
(
 #"duplicates from a singly linked list,\" and the second question was "
 #"\"write code to find the kth-to-last element from"
) 0 0 24 29 1 #"\n"
0 0 20 3 112
(
 #"a singly linked list.\" I almost finished these questions yesterday,"
 #" and finally got it all working today. I also"
) 0 0 24 29 1 #"\n"
0 0 20 3 115
(
 #"had the chance to write my code on the whiteboard as if I was in an "
 #"actual coding interview. Below is the code that"
) 0 0 24 29 1 #"\n"
0 0 20 3 43 #"I wrote in Python to answer both questions:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 20 3 11 #"class Node:"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 24 #"def __init__(self, key):"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 14 #"self.key = key"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 16 #"self.next = None"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 17 #"class LinkedList:"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 19 #"def __init__(self):"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 16 #"self.head = None"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 18 #"def display(self):"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 16 #"temp = self.head"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 11 #"while temp:"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 26 #"print(temp.key, end = \" \")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 16 #"temp = temp.next"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 28 #"def create_list(self, data):"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 11 #"if data[0]:"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 25 #"self.head = Node(data[0])"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 16 #"temp = self.head"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 29 #"for i in range(1, len(data)):"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 25 #"temp.next = Node(data[i])"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 16 #"temp = temp.next"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 25 #"def kth_to_last(self, k):"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 16 #"temp = self.head"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 17 #"other = temp.next"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 4 #"try:"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 18 #"for i in range(k):"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 20 3 18 #"other = other.next"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 7 #"except:"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 56
#"print(\"There are less than\", k, \"elements in the list.\")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 6 #"return"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 12 #"while other:"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 16 #"temp = temp.next"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 18 #"other = other.next"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 15 #"print(temp.key)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 28 #"def remove_duplicates(self):"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 16 #"temp = self.head"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 16 #"if temp is None:"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 6 #"return"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 16 #"comp = temp.next"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 5 #"i = 0"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 5 #"j = 1"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 11 #"while temp:"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 11 #"while comp:"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 20 3 24 #"if temp.key == comp.key:"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 20 3 16 #"comp = comp.next"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 20 3 15 #"new = self.head"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 20 3 9 #"index = 0"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 20 3 20 #"while index < j - 1:"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 20 3 14 #"new = new.next"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 20 3 10 #"index += 1"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 20 3 15 #"new.next = comp"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 20 3 6 #"j += 1"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 20 3 5 #"else:"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 20 3 16 #"comp = comp.next"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 20 3 6 #"j += 1"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 16 #"temp = temp.next"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 4 #"try:"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 20 3 16 #"comp = temp.next"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 7 #"except:"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 20 3 6 #"return"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 6 #"i += 1"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 9 #"j = i + 1"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 11 #"return self"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 17 #"LL = LinkedList()"
0 0 24 29 1 #"\n"
0 0 20 3 34 #"LL.create_list([1, 2, 5, 3, 6, 3])"
0 0 24 29 1 #"\n"
0 0 20 3 22 #"LL.remove_duplicates()"
0 0 24 29 1 #"\n"
0 0 20 3 12 #"LL.display()"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 128
(
 #"Additionally, me and Charbel finished the third kata today for our s"
 #"nake game. This kata involves the \"snake\" continually moving"
) 0 0 24 29 1 #"\n"
0 0 20 3 82
(
 #"in a certain direction, which can be changed by the arrow keys. The "
 #"code is below:"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 20 #"(require 2htdp/image"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 20 3 15 #"2htdp/universe)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 19 #"(struct posn (x y))"
0 0 24 29 1 #"\n"
0 0 20 3 25 #"(struct snake (dir posn))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 21 #"(define starter-snake"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 28 #"(snake \"up\" (posn 300 300)))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 25 #"(define (add-posns p1 p2)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 5 #"(posn"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 20 3 27 #"(+ (posn-x p1) (posn-x p2))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 20 3 29 #"(+ (posn-y p1) (posn-y p2))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 38 #"(define (update-direction s direction)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 20 3 35 #"(define newsnake (struct-copy snake"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 20 3 1 #"s"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 20 3 17 #"[dir direction]))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 22 #"(move-snake newsnake))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 26 #"(define (change-dir s key)"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 20 3 5 #"(cond"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 20 3 49 #"[(key=? key \"left\")  (update-direction s \"left\")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 20 3 50 #"[(key=? key \"right\") (update-direction s \"right\")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 20 3 46 #"[(key=? key \"up\")   (update-direction s \"up\")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 20 3 48 #"[(key=? key \"down\") (update-direction s \"down\")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 20 3 10 #"[else s]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 37 #"(define (move-snake-in-direction s p)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 20 #"(struct-copy snake s"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 20 3 37 #"[posn (add-posns p (snake-posn s))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 22 #"(define (move-snake s)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 26 #"(define dir (snake-dir s))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 5 #"(cond"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 61
#"[(string=? dir \"up\") (move-snake-in-direction s (posn 0 -4))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 62
#"[(string=? dir \"down\") (move-snake-in-direction s (posn 0 4))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 63
#"[(string=? dir \"left\") (move-snake-in-direction s (posn -4 0))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 67
(
 #"[(string=? dir \"right\") (move-snake-in-direction s (posn 4 0))]   "
 #" "
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 10 #"[else s]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 18 #"(define (render s)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 25 #"(define p (snake-posn s))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 36 #"(place-image (circle 10 'solid 'red)"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 20 3 21 #"(posn-x p) (posn-y p)"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 20 3 23 #"(empty-scene 600 600)))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 23 #"(big-bang starter-snake"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 20 #"(on-tick move-snake)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 19 #"(on-key change-dir)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 17 #"(to-draw render))"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"blog-post"
0 0 24 3 1 #"["
0 0 19 3 8 #"\"Day 10\""
0 0 24 3 2 #"]{"
0 0 24 29 1 #"\n"
0 0 20 3 125
(
 #"The wifi was out pretty much all day today, so we mostly worked on m"
 #"ore coding interview challenges, and shared our work with"
) 0 0 24 29 1 #"\n"
0 0 20 3 124
(
 #"others. Along with learning a bit about programming in racket, we al"
 #"so worked on questions such as adding two numbers stored"
) 0 0 24 29 1 #"\n"
0 0 20 3 126
(
 #"as linked lists whose digits are reversed, and determining if two li"
 #"sts intersect. I finished the code for adding two numbers,"
) 0 0 24 29 1 #"\n"
0 0 20 3 15 #"which is below:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 20 3 23 #"def add_digits(L1, L2):"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 15 #"temp1 = L1.head"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 15 #"temp2 = L2.head"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 20 #"final = LinkedList()"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 21 #"next_node_partial = 0"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 22 #"while temp1 and temp2:"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 29 #"digit = temp1.key + temp2.key"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 25 #"new_node_key = digit % 10"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 47 #"final.add_key(new_node_key + next_node_partial)"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 31 #"next_node_partial = digit // 10"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 18 #"temp1 = temp1.next"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 18 #"temp2 = temp2.next"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 12 #"while temp1:"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 44 #"final.add_key(temp1.key + next_node_partial)"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 21 #"next_node_partial = 0"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 18 #"temp1 = temp1.next"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 12 #"while temp2:"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 44 #"final.add_key(temp2.key + next_node_partial)"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 21 #"next_node_partial = 0"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 18 #"temp2 = temp2.next"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 15 #"final.display()"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 111
(
 #"For determining if two lists intersect, I was a little bit stumped a"
 #"t first, because I could think of an O(n^2)"
) 0 0 24 29 1 #"\n"
0 0 20 3 125
(
 #"implementation pretty easily by comparing every node, but Stephen sa"
 #"id there was a better way. Eventually I realized that two"
) 0 0 24 29 1 #"\n"
0 0 20 3 122
(
 #"intersecting lists would have to have the same ending node. Then we "
 #"were eventually given a hint that we could add a field"
) 0 0 24 29 1 #"\n"
0 0 20 3 121
(
 #"to the nodes which would say if the node had been visited or not, wh"
 #"ich made the challenge a lot easier. Here is my code:"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 20 3 22 #"def intersect(L1, L2):"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 11 #"if L1.head:"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 15 #"temp1 = L1.head"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 12 #"while temp1:"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 20 #"temp1.visited = True"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 18 #"temp1 = temp1.next"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 11 #"if L2.head:"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 15 #"temp2 = L2.head"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 12 #"while temp2:"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 20 3 25 #"if temp2.visited == True:"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 20 3 23 #"print(\"THEY INTERSECT\")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 20 3 12 #"return temp2"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 20 3 18 #"temp2 = temp2.next"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 30 #"print(\"THEY DO NOT INTERSECT\")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 12 #"return False"
0 0 24 3 1 #"}"
0 0 20 3 20 #"                    "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"blog-post"
0 0 24 3 1 #"["
0 0 19 3 8 #"\"Day 11\""
0 0 24 3 2 #"]{"
0 0 24 29 1 #"\n"
0 0 20 3 160
(
 #"Today we worked on coding interview questions again for the first fe"
 #"w hours of the day. After temporarily giving up yesterday on the bin"
 #"ary tree depth traversal"
) 0 0 24 29 1 #"\n"
0 0 20 3 160
(
 #"challenge, I worked on and finished four easier challenges that Step"
 #"hen had put up for today. The first one I put within the Linked List"
 #" class, and the rest are"
) 0 0 24 29 1 #"\n"
0 0 20 3 31 #"defined outside of any classes:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 20 3 18 #"def average(self):"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 17 #"if not self.head:"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 6 #"return"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 16 #"temp = self.head"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 9 #"total = 0"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 10 #"amount = 0"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 11 #"while temp:"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 17 #"total += temp.key"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 16 #"temp = temp.next"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 11 #"amount += 1"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 21 #"return total / amount"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 33 #"def longest_string(list_strings):"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 22 #"if list_strings == []:"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 6 #"return"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 25 #"longest = list_strings[0]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 33 #"cur_length = len(list_strings[0])"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 41 #"for index in range(1, len(list_strings)):"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 41 #"if len(list_strings[index]) > cur_length:"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 29 #"longest = list_strings[index]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 37 #"cur_length = len(list_strings[index])"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 14 #"return longest"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 24 #"def apple(list_strings):"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 22 #"if list_strings == []:"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 6 #"return"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 38 #"for index in range(len(list_strings)):"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 34 #"if list_strings[index] == \"apple\":"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 11 #"return True"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 12 #"return False"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 20 #"def range_func(num):"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 12 #"if num <= 0:"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 6 #"return"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 11 #"counter = 0"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 15 #"list_range = []"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 20 #"while counter < num:"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 26 #"list_range.append(counter)"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 12 #"counter += 1"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 17 #"return list_range"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 159
(
 #"After finishing these functions, I decided to go back to the Binary "
 #"Search Tree traversal because I had some extra time. Eventually, I f"
 #"igured it out, although"
) 0 0 24 29 1 #"\n"
0 0 20 3 64
#"I know that my implementation could definitely be improved upon."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 20 3 26 #"def level_traversal(self):"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 17 #"if not self.root:"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 6 #"return"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 16 #"temp = self.root"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 11 #"q = Queue()"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 15 #"q.enqueue(temp)"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 22 #"temp.level = level = 0"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 15 #"all_levels = []"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 14 #"while q.items:"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 14 #"cur_level = []"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 59
#"while q.items and q.items[len(q.items) - 1].level == level:"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 20 3 18 #"temp = q.dequeue()"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 20 3 13 #"if temp.left:"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 20 3 32 #"temp.left.level = temp.level + 1"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 20 3 14 #"if temp.right:"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 20 3 33 #"temp.right.level = temp.level + 1"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 20 3 26 #"cur_level.append(temp.key)"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 20 3 13 #"if temp.left:"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 20 3 20 #"q.enqueue(temp.left)"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 20 3 14 #"if temp.right:"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 20 3 21 #"q.enqueue(temp.right)"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 10 #"level += 1"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 28 #"all_levels.append(cur_level)"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 17 #"return all_levels"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 159
(
 #"During the last part of today (after lunch), I worked on a bonus pro"
 #"blem that Stephen had on the board, which was to write a function re"
 #"turning the height of a"
) 0 0 24 29 1 #"\n"
0 0 20 3 43 #"binary tree. Here is the code that I wrote:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 20 3 17 #"def height(self):"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 16 #"temp = self.root"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 6 #"s = []"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 19 #"s.append((temp, 0))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 18 #"cur_max_height = 0"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 18 #"while len(s) != 0:"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 13 #"temp = s.pop("
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 16 #"if temp[0].left:"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 20 3 37 #"s.append((temp[0].left, temp[1] + 1))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 17 #"if temp[0].right:"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 20 3 38 #"s.append((temp[0].right, temp[1] + 1))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 28 #"if temp[1] > cur_max_height:"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 20 3 24 #"cur_max_height = temp[1]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 21 #"return cur_max_height"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"blog-post"
0 0 24 3 1 #"["
0 0 19 3 8 #"\"Day 12\""
0 0 24 3 2 #"]{"
0 0 24 29 1 #"\n"
0 0 20 3 163
(
 #"At the beginning of the day today we read an article about LISP, and"
 #" then discussed it for a while and talked about the significance of "
 #"macros within the language,"
) 0 0 24 29 1 #"\n"
0 0 20 3 161
(
 #"and programmed our own simple macro in Racket. After that, Charbel a"
 #"nd I updated the main page of the games kata on the website so that "
 #"its purpose is clearer to"
) 0 0 24 29 1 #"\n"
0 0 20 3 161
(
 #"new viewers. Once we finished organizing the page, I went back to a "
 #"coding challenge that was written on the whiteboard, which was to wr"
 #"ite a function that sorts"
) 0 0 24 29 1 #"\n"
0 0 20 3 121
(
 #"numbers in a stack (without using any other data structures, except "
 #"for more stacks). Here is my code for this challenge:"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 20 3 18 #"def sort_stack(s):"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 11 #"b = Stack()"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 15 #"final = Stack()"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 19 #"final.push(s.pop())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 22 #"while not s.isEmpty():"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 17 #"cur_val = s.pop()"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 27 #"if cur_val <= final.peek():"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 19 #"final.push(cur_val)"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 5 #"else:"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 46 #"while final.peek() and cur_val > final.peek():"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 20 3 19 #"b.push(final.pop())"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 19 #"final.push(cur_val)"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 22 #"while not b.isEmpty():"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 20 3 19 #"final.push(b.pop())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 12 #"return final"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"blog-post"
0 0 24 3 1 #"["
0 0 19 3 8 #"\"Day 13\""
0 0 24 3 2 #"]{"
0 0 24 29 1 #"\n"
0 0 20 3 125
(
 #"Today we started with a coding warmup, in which we had the choice be"
 #"tween an easy, medium, and hard problem. Since I had done"
) 0 0 24 29 1 #"\n"
0 0 20 3 120
(
 #"all three of these challenges the week before, I simply updated my c"
 #"ode from before and tried to make the implementation"
) 0 0 24 29 1 #"\n"
0 0 20 3 127
(
 #"better. I then went up and presented my code on the board. After lun"
 #"ch, we then chose new kata collections to work on in pairs,"
) 0 0 24 29 1 #"\n"
0 0 20 3 122
(
 #"and Drew and I chose to work on coding interview questions using lis"
 #"ts/arrays from data structures and algorithms. Here is"
) 0 0 24 29 1 #"\n"
0 0 20 3 70
(
 #"my updated algorithm for determining where two linked lists intersec"
 #"t:"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 20 3 22 #"def intersect(L1, L2):"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 12 #"visited = []"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 11 #"if L1.head:"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 15 #"temp1 = L1.head"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 12 #"while temp1:"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 21 #"visited.append(temp1)"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 18 #"temp1 = temp1.next"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 11 #"if L2.head:"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 15 #"temp2 = L2.head"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 12 #"while temp2:"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 20 3 20 #"if temp2 in visited:"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 20 3 12 #"return temp2"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 20 3 18 #"temp2 = temp2.next"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 6 #"return"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"blog-post"
0 0 24 3 1 #"["
0 0 19 3 8 #"\"Day 14\""
0 0 24 3 2 #"]{"
0 0 24 29 1 #"\n"
0 0 20 3 124
(
 #"Today we started with warmup coding interview questions, like usual,"
 #" and I worked on a better algorithm for the intersecting"
) 0 0 24 29 1 #"\n"
0 0 20 3 96
(
 #"nodes function. While the code itself may be longer, it has a runtim"
 #"e of O(n) instead of O(n^2):"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 20 3 29 #"def intersect_better(L1, L2):"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 23 #"if L1.head and L2.head:"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 15 #"temp1 = L1.head"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 15 #"temp2 = L2.head"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 17 #"len1, len2 = 1, 1"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 17 #"while temp1.next:"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 18 #"temp1 = temp1.next"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 9 #"len1 += 1"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 17 #"while temp2.next:"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 18 #"temp2 = temp2.next"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 9 #"len2 += 1"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 11 #"i, j = 0, 0"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 15 #"if len1 > len2:"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 15 #"i = len1 - len2"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 17 #"elif len1 < len2:"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 15 #"j = len2 - len1"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 15 #"temp1 = L1.head"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 15 #"temp2 = L2.head"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 12 #"while i > 0:"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 18 #"temp1 = temp1.next"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 6 #"i -= 1"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 12 #"while j > 0:"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 18 #"temp2 = temp2.next"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 6 #"j -= 1"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 22 #"while temp1 and temp2:"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 18 #"if temp1 == temp2:"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 20 3 16 #"return temp1.key"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 18 #"temp1 = temp1.next"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 20 3 18 #"temp2 = temp2.next"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 6 #"return"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 123
(
 #"We were also asked to write one line of code for the \"easy\" task t"
 #"oday, which was to add corresponding elements of lists of"
) 0 0 24 29 1 #"\n"
0 0 20 3 100
(
 #"the same size to create one list with the all of the additions. For "
 #"this, I used list comprehension:"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 20 3 70
(
 #"newlist = [list1[index] + list2[index] for index in range(len(list1)"
 #")]"
) 0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 126
(
 #"After finishing these warmup problems, we began working on our kata "
 #"collections again. We made some progress with updating the"
) 0 0 24 29 1 #"\n"
0 0 20 3 83
(
 #"main scribble files to include the interview katas, and added a few "
 #"kata examples. "
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"blog-post"
0 0 24 3 1 #"["
0 0 19 3 8 #"\"Day 15\""
0 0 24 3 2 #"]{"
0 0 24 29 1 #"\n"
0 0 20 3 40 #"Today we had no wifi, so we did several "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0           0
