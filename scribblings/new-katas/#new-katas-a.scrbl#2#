#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 22 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 1 6 #"wxloc\0"
          0 0 53 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 627 0 28 3 21 #"#lang scribble/manual"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"@("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 23 #"ts-kata-util/katas/main"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 28 #"ts-kata-util/katas/rendering"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 56
#"\"../../Kata-Collections/my-fundamentals-katas/katas.rkt\""
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 60
#"\"../../Kata-Collections/my-fundamentals-katas/rendering.rkt\""
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 9 #"except-in"
0 0 24 3 1 #" "
0 0 14 3 6 #"racket"
0 0 24 3 1 #" "
0 0 14 3 4 #"read"
0 0 24 3 1 #" "
0 0 15 3 2 #"do"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 7 #"section"
0 0 24 3 1 #"{"
0 0 20 3 5 #"Intro"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 80
(
 #"This is a collection of new proto-Katas related to Maps, Apply, and "
 #"Superimpose."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 7 #"section"
0 0 24 3 1 #"{"
0 0 20 3 4 #"Maps"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 4 #"bold"
0 0 24 3 1 #"{"
0 0 20 3 9 #"Example 1"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 20 3 62
#"Subtracts 1 from every number in the lists and prints them out"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 27 #"#lang racket (require pict)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 20 3 21 #"(map sub1 (range 10))"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 4 #"bold"
0 0 24 3 1 #"{"
0 0 20 3 9 #"Example 2"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 20 3 179
(
 #"Creates a list with the first 2 numbers in the range and incrementin"
 #"g by the third number each time. The list is subtracted by 1 and the"
 #"n the greatest common denominator is found."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 27 #"#lang racket (require pict)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 20 3 39 #"(apply gcd (map sub1 (range -10 11 2)))"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 4 #"bold"
0 0 24 3 1 #"{"
0 0 20 3 9 #"Example 3"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 20 3 123
(
 #"This code takes a list of numbers created by 'range' which goes from"
 #" 0 to 9, and applies the 'circle' function to the list."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 27 #"#lang racket (require pict)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 20 3 23 #"(map circle (range 10))"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 121
(
 #"The circle function takes this number and outputs a circle image wit"
 #"h that number as the diameter of the circle. So, this"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 88
(
 #"code effectively creates a list of 10 circle images increasing in di"
 #"ameter from 0 to 9. "
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 4 #"bold"
0 0 24 3 1 #"{"
0 0 20 3 9 #"Example 4"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 20 3 104
(
 #"This works in a similar way to the example above, except that the fu"
 #"nction used in map is now rectangle."
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 27 #"#lang racket (require pict)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 20 3 36 #"(map rectangle (range 10)(range 10))"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 20 3 32 #"Rectangle requires at least two "
0 0 20 3 139
(
 #"numerical input arguments to run, so at least two lists of numbers o"
 #"f equal length must be inputted. This code outputs a list of rectang"
 #"les"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 76
(
 #"with widths and heights going from 0 (nonexistant) to 1 (just a pixe"
 #"l) to 9."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 4 #"bold"
0 0 24 3 1 #"{"
0 0 20 3 9 #"Example 5"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 20 3 87
(
 #"When this code is run, it outputs a list with two strings: \"Applehi"
 #"\" and \"Bananathere.\""
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 27 #"#lang racket (require pict)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 20 3 62
(
 #"(map string-append (list \"Apple\" \"Banana\")(list \"hi\" \"there\""
 #"))"
) 0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 134
(
 #"This is because map makes the function 'string-append' append the tw"
 #"o arguments Apple and hi together because they are the first items"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 108
(
 #"in their respective list of arguments and Bananathere because they a"
 #"re both second in their lists and so on."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 124
(
 #"The apply function works very similarly to the map function in that "
 #"it also applies a given function to a list of arguments."
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 133
(
 #"It has the same inputs as the map function, but unlike map, apply re"
 #"turns a singular output of the given function rather than a list."
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 48 #"It also has the same format as the map function."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 4 #"bold"
0 0 24 3 1 #"{"
0 0 20 3 9 #"Example 6"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 20 3 36 #"To subtract 1 from a list of 0 -> 99"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   @"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 27 #"#lang racket (require pict)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 20 3 22 #"(map sub1 (range 100))"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 4 #"bold"
0 0 24 3 1 #"{"
0 0 20 3 9 #"Example 7"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 20 3 64
#"A list of 20 clouds of width 100 and height ranging from 0 to 19"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 27 #"#lang racket (require pict)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 20 3 33 #"(map (curry cloud 100)(range 20))"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" @"
0 0 14 3 4 #"bold"
0 0 24 3 1 #"{"
0 0 20 3 9 #"Example 8"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 20 3 27 #"Rotating a list of Ellipses"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 20 3 27 #"#lang racket (require pict)"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 20 3 14 #"(require pict)"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 20 3 52 #"(map (curry rotate (ellipse 40 80))(range 0 120 10))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  }"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 4 #"bold"
0 0 24 3 1 #"{"
0 0 20 3 9 #"Example 9"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 20 3 34 #"Shuffles the given list of letters"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 27 #"#lang racket (require pict)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 20 3 43 #"(map shuffle (list (list \"c\" \"o\" \"d\" \"e\")))"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 4 #"bold"
0 0 24 3 1 #"{"
0 0 20 3 10 #"Example 10"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 27 #"#lang racket (require pict)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 20 3 45 #"(map (curry angel-wing 100 100) (list #t #f))"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 4 #"bold"
0 0 24 3 1 #"{"
0 0 20 3 10 #"Example 11"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 27 #"#lang racket (require pict)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 20 3 48 #"(map sub1 (list (count even? (list 1 2 3 4 5))))"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 4 #"bold"
0 0 24 3 1 #"{"
0 0 20 3 10 #"Example 12"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 20 3 75
(
 #"Creates multiple circles with radii ranging from 10-100 in increment"
 #"s of 10"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 27 #"#lang racket (require pict)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 20 3 40 #"(map circle (shuffle (range 10 100 10)))"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 4 #"bold"
0 0 24 3 1 #"{"
0 0 20 3 10 #"Example 13"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 20 3 89
(
 #"Compare two lists and output true whenever they find different numbe"
 #"rs in a certain index"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 27 #"#lang racket (require pict)"
0 0 24 29 1 #"\n"
0 0 20 3 42 #"(map (negate =) (list 1 2 1) (list 1 2 3))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 7 #"section"
0 0 24 3 1 #"{"
0 0 20 3 5 #"Apply"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 4 #"bold"
0 0 24 3 1 #"{"
0 0 20 3 9 #"Example 1"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 118
(
 #"This applies the addition function (+) to all of the numbers in the "
 #"list of 0 through 9, and so returns the number 45."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 27 #"#lang racket (require pict)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 20 3 20 #"(apply + (range 10))"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 4 #"bold"
0 0 24 3 1 #"{"
0 0 20 3 9 #"Example 2"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 59
#"This creates a series of jack-o-lanterns that grow in size."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 27 #"#lang racket (require pict)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 20 3 49 #"(apply hc-append (map jack-o-lantern (range 20)))"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 4 #"bold"
0 0 24 3 1 #"{"
0 0 20 3 9 #"Example 3"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 27 #"#lang racket (require pict)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 20 3 59
#"(apply hc-append (shuffle (map desktop-machine (range 5))))"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 40 #"This shuffles a list of desktop machines"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 7 #"section"
0 0 24 3 1 #"{"
0 0 20 3 11 #"Superimpose"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 4 #"bold"
0 0 24 3 1 #"{"
0 0 20 3 9 #"Example 1"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 20 3 54 #"This is an example of map and apply working together. "
0 0 20 3 1 #" "
0 0 20 3 84
(
 #"The map function generates a list of circle images increasing in siz"
 #"e, and the apply"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 85
(
 #"function uses the cc-superimpose function to put them all together i"
 #"n the same image."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  @"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 27 #"#lang racket (require pict)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 20 3 21 #"(apply cc-superimpose"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 20 3 24 #"(map circle (range 10)))"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 130
(
 #"Compose is a power tool function that allows one to put a function w"
 #"ithin another function. In mathematical terms, it lets you use"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 35 #"f(g(x)), where the syntax would be:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" @"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 13 #"(compose f g)"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 124
(
 #"such that function g is inside of the function f. Compose works best"
 #" when the output(s) of the function g is the same as the"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 81
(
 #"input(s) of the function f. There may be ways around this, but I don"
 #"'t know them."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 4 #"bold"
0 0 24 3 1 #"{"
0 0 20 3 9 #"Example 2"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 90
(
 #"Create a rotated rectangle that is superimoposed that is 300 by 100 "
 #"and has a range of 100"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" @"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 27 #"#lang racket (require pict)"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 20 3 21 #"(apply cc-superimpose"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 20 3 4 #"(map"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 46 #"(curry rotate (rectangle 300 100)) (range 100)"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 20 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 20 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   }"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 4 #"bold"
0 0 24 3 1 #"{"
0 0 20 3 9 #"Example 3"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 84
(
 #"Create a rotated elipse that is superimposed and is 100 in height an"
 #"d 300 in width h"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" @"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 27 #"#lang racket (require pict)"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 20 3 21 #"(apply cc-superimpose"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 20 3 4 #"(map"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 44 #"(curry rotate (ellipse 300 100)) (range 100)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 1 #")"
0 0 24 29 1 #"\n"
0 0 20 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 4 #"bold"
0 0 24 3 1 #"{"
0 0 20 3 9 #"Example 4"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 32 #"This creates concentric circles."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" @"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 27 #"#lang racket (require pict)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 20 3 53 #"(apply cc-superimpose (map circle (range 10 100 20)))"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 4 #"bold"
0 0 24 3 1 #"{"
0 0 20 3 9 #"Example 5"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 33 #"This creates concentric ellipses."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 27 #"#lang racket (require pict)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 20 3 71
(
 #"(apply cc-superimpose (map ellipse (range 20 80 20) (range 40 160 40"
 #")))"
) 0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 4 #"bold"
0 0 24 3 1 #"{"
0 0 20 3 9 #"Example 6"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 20 3 38 #"Superimposing all the rotated Ellipses"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" @"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 27 #"#lang racket (require pict)"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 20 3 21 #"(apply cc-superimpose"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 20 3 53 #"(map (curry rotate (ellipse 40 80))(range 0 120 10)))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  }"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 4 #"bold"
0 0 24 3 1 #"{"
0 0 20 3 9 #"Example 7"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 9 #"A spiral!"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   @"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 27 #"#lang racket (require pict)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 20 3 60
#"(apply cc-superimpose (map (compose circle sqr) (range 20)))"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 4 #"bold"
0 0 24 3 1 #"{"
0 0 20 3 9 #"Example 8"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 24 #"Creates an orange flower"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 27 #"#lang racket (require pict)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 20 3 65
#"(apply cc-superimpose(list (cloud 175 175 \"orange\")(circle 100)))"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"@("
0 0 14 3 6 #"render"
0 0 24 3 1 #" "
0 0 14 3 4 #"easy"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"@("
0 0 14 3 6 #"render"
0 0 24 3 1 #" "
0 0 14 3 5 #"jason"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0           0
