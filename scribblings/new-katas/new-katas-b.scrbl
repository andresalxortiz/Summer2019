#lang scribble/manual

@section{Intro}

@section{Numbers}
@bold{Example 1}
Add together all odd numbers from 1 to 51 
@codeblock{
#lang racket
(apply +
  (map (curry + -1)
  (map (curry * 2)(range 1 51))))
(displayln "")
}

@bold{Example 2}
Multiply together the sums of 1 through 10 and 11 through 20 using nested functions.

@codeblock{
#lang racket
(*(apply +
  (range 1 11))
    (apply +
      (range 11 21)))
(displayln "")
}
;This function is nested:
;The inner layer consists of two sums: one from the range of 1 to 10, and one from the range of 11 to 20.
;Using (apply + (range 1 11)) will apply the function '+' (addition) to all the elements in the list generated by (range 1 11).
;The outer layer multiplies these two sums together to achieve the desired result. (* x y) will return x multiplied by y,
;in this case, our two sums.

@section{Rotating and Superimposing Picts}
@bold{Example 3}
Print out a list of rotated purple squares with width 30 by defining a custom function.
@codeblock{
 #lang racket
 (require pict)

 (define nums (range 0 10))
 (define (rotateSquare n)
 (rotate (colorize (filled-rectangle 30 30)
 "purple") n))
 (apply vc-append (map rotateSquare nums))
}
;First, this code defines a list of the numbers 0-9 called 'nums'. It then defines a function called rotateSquare that takes a
;list as input ('nums', in this case). It rotates a purple square with height 30 n times, and prints out these squares
;in place of the list. 'Colorize' is self explanatory; it returns the given shape in the given color.
;Note that vc-append means that you are creating a row (think v=vertical) of images that is centered (think c=center).

@bold{Example 4}
Append a circle and rectangle so that they are centered and horizontal.
The circle should have a radius of 100, and the rectangle should have a width
of 100 and a height of 200. The range should be 100.
@codeblock{
 #lang racket
 (require pict)
 
 (apply cc-superimpose
 (map
 (curry rotate(hc-append (circle 100) (rectangle 100 200))) (range 100))
 )
}
;First, you create an image of a circle next to a rectangle in the line (hc-append (circle 100) (rectangle 100 200)).
;(Note: hc-append creates a column (think h=horizontal) that is centered (think c=center).
;You then apply rotate on this image for each number in (range 100) using the curry function. Curry will apply a function
;(the first input) to a set of values (the second input, a list).
;You then superimpose all of these images centered onto each other.

@bold{Example 5}
Append a circle and a rectangle so that they are centered and vertical.
The circle should have a radius of 100, and the rectangle should have a width of 100 and
a height of 200. The range should be 100.
@codeblock{
 #lang racket
 (require pict)
 
 (apply cc-superimpose
 (map
 (curry rotate(vc-append (circle 100) (rectangle 100 200))) (range 100))
 )
}
;Similarly to the example above, you create the image of a circle on top of a rectangle, and then apply rotation
;using the curry function in range 100. You want to superimpose these centered onto each other, using cc-superimpose.

@bold{Example 6}
Use the 'compose' function to superimpose circles of decreasing size,
then put rotated squares inside the circles.
@codeblock{
 #lang racket
 (require pict)

 (apply cc-superimpose
   (append
     (map (compose circle sqr) (range 10 15))
     (map (curry rotate (rectangle 100 100)) (range 7))))
}
;This function uses 'compose,' which can apply multiple functions to a value, in reverse order of how they are listed.
;The snippet (compose circle sqr) (range 10 15) therefore squares each number in the list '(10 11 12 13 14), then
;creates 5 circles with the respective values as the radii. We want to superimpose these circles, along with a rotated
;square centered onto each other.


@bold{Example 7}
Create a row of different colored file-icons increasing in
size.
@codeblock{
#lang racket

(require pict)
(apply hbl-append
       (map file-icon (map (curry * 10) (range 5))
         (map (curry * 10) (range 5))
         (list "gray" "orange" "red" "green" "blue")))
}
;This example hbl-appends (note: hbl = horizontal bottom left) a list of file-icons that have parameters
;from the three lists that indicate width, length, and color of the file-icon.

@section{More Picts}
@bold{Example 8}
Define a function that prints out a jack-o-lantern if the input
is a standard-fish with width 100 and length 50. Otherwise, add 1 to every item in the
list (1, 2, 3).
@codeblock{
 #lang racket
 (require pict)
 (define nice-fish (standard-fish 100 50))

 (define (func x)
 (if (equal? x nice-fish)
 (jack-o-lantern 100)
 (map add1 (list 1 2 3))))

 (func nice-fish)
}
;This code first defines a function called nice-fish which returns a standard fish image with width 100 and length 50.
;It then defines the desired function, which first checks that the input is equal to the output of nice-fish, and
;returns a jack-o-lantern if they are the same. Otherwise, it uses the built-in add1 function to add 1 to each
;number in a list containing 1, 2, and 3.

@bold{Example 9}
Create a list of circles so that every circle is a different color of the rainbow.
@codeblock{
 #lang racket
 (require pict)
  
 (define (rainbow x)
 (map (lambda (color)
 (colorize x color))
 (list "red" "orange" "yellow" "green" "blue" "purple")))
 (rainbow (circle 50))
}
;Inside the function rainbow, we map the function lambda ('lambda' is used to define an 'anonymous'/'temporary' function) to
;a list of colors. This means we will generate a list of images that are created by running every element in the color
;list through the function 'lambda,' which colorizes image x with the inputted color. (rainbow (circle 50)) returns a list of circles.

@bold{Example 10}
Create a list of 6 circles (each with radius 50) so that every circle is a different color of the rainbow,
and the circles are stacked vertically.
@codeblock{
#lang racket
(require pict)
 
(define (rainbow x)
  (map (lambda (color)
         (colorize x color))
       (list "red" "orange" "yellow" "green" "blue" "purple")))
(apply vc-append(rainbow (circle 50)))
}
;Inside the function rainbow, we map the function lambda ('lambda' is used to define an 'anonymous'/'temporary' function) to
;a list of colors. This means we will generate a list of images that are created by running every element in the color
;list through the function 'lambda,' which colorizes image x with the inputted color.
;(rainbow (circle 50)) returns a list of circles, but we want to stack them to make a vertical line, so we use
;apply vc-append, which will take the images in the list and vertically stack them centered above each other.

@section{Alternating Lists}
@bold{Example 11}
Create a  list of 2 alternating colors of your choice.
@codeblock{       
#lang racket
(require pict)
  
(define nums (range 20))

(define bools (map even? nums))
bools

(define (bools->color b)
  (if b "salmon" "midnight blue"))

(define colors
  (map
   bools->color
   bools))

colors
}
;This code first defines a list of the numbers 0 to 19, called 'nums.'
;It then defines bools, which returns a list of booleans, #t when a number is even, and #f otherwise.
;The function bools->color takes a boolean as input, and converts it to a color.
;'colors' maps the results of bools as input to the function bools->color, consequently generating
;a list of alternating colors.

@bold{Example 12}
Create a list of 15 fish that have alternating colors of your choice.
@codeblock{
 #lang racket
 (require pict)

 (define (make-color b)
 (if b "blue" "purple"))

 (define (make-fish c)
 (standard-fish 50 50 #:color c))

 (map (compose make-fish make-color even?) (range 15))
}
;The make-color function takes in a boolean and returns different colors, depending on the value of the boolean.
;The make-fish function takes as input c, a color, and returns a standard-fish with dimensions 50 x 50 and in color 'c.'
;We include the keyword #:color, because color is an optional argument for standard-fish and already has a default.
;If we simply input the three parameters without the keyword, you will run into an error, because standard-fish takes
;2 inputs by default.
;The last line applies compose (remember, 'compose' can apply multiple functions to a value, in reverse order of how they are listed.)
;to first apply even? to the numbers in (range 15) to generate booleans, then applies make-color to the generated booleans,
;then applies make-fish with these colors as input.
