;Kata 6: Use your blinking, following eye from the 5th eye kata to give yourself the
;ability to control wherever your eye appears in the window.
;Ex: Draw an eye 30 units right and 40 units below the center.


; Defines one animated eye, distance adjusts the eye away from the center.
(define (animated-eye x-distance y-distance)
  
;====== Eye Drawing ==============
  
; Constant for eye's x and y coordinates
(define EYE-X (+ 250 x-distance))
(define EYE-Y (+ 250 y-distance))
  
; TO-DRAW
(define (create-spinning-eye angle)
  (if (= angle -1) (closed-eye) (open-eye angle)))

; Draws open eye
(define (open-eye angle)
  (place-image (rotate angle eye)
             EYE-X EYE-Y
             (empty-scene 500 500)))
  
; Draws closed eye
(define (closed-eye)
    (place-image (circle 30 "solid" "black")
             EYE-X EYE-Y
             (empty-scene 500 500)))
  
; Eye sprite
(define eye (overlay/offset (circle 12 "solid" "black") 0 18
                          (circle 30 "outline" "black")))

;====== Mouse Event ==============

; Handles mouse event
(define (mouse-handler w x y me)
(cond
  [(mouse=? me "move") (calc-angle x y)]
  [(and (mouse=? me "button-down") (check-posn x y)) -1]
  [(and (mouse=? me "button-up") (check-posn x y)) (calc-angle x y)]
  [else w]))

; Calculates the angle between the center of the eye and where the mouse is
(define (calc-angle x y)
  (+ 180 (/ (* 180 (atan (- x EYE-X) (- y  EYE-Y))) pi)))

; Checks if the mouse's posn is inside of the eye
(define (check-posn x y)
  (if (< (calc-distance x y EYE-X EYE-Y) 30) #t #f))

; Distance formula
(define (calc-distance x1 y1 x2 y2)
  (sqrt (+ (sqr (- x2 x1)) (sqr (- y2 y1)))))

(big-bang 0
  (to-draw create-spinning-eye)
  (on-mouse mouse-handler)))


; Draws an eye 30 units right and 40 units below the center
(animated-eye 30 40)
